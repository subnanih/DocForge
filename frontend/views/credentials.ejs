<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen">
    <%- include('partials/navbar') %>
    
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-900">Credentials Management</h1>
                    <p class="text-gray-600 mt-1">Securely store and manage your service credentials</p>
                </div>
                <button id="add-credential-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200">
                    <i class="fas fa-plus mr-2"></i>
                    Add Credential
                </button>
            </div>
        </div>

        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-key text-blue-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Total Credentials</p>
                        <p class="text-2xl font-bold text-gray-900"><%= credentials.length %></p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-server text-green-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Environments</p>
                        <p class="text-2xl font-bold text-gray-900"><%= [...new Set(credentials.map(c => c.environment))].length %></p>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-200">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-cogs text-purple-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600">Services</p>
                        <p class="text-2xl font-bold text-gray-900"><%= [...new Set(credentials.map(c => c.serviceName))].length %></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            <div class="flex flex-col md:flex-row gap-4">
                <div class="flex-1">
                    <input 
                        type="text" 
                        id="search-input"
                        placeholder="Search credentials..."
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                </div>
                <div class="md:w-48">
                    <select id="env-filter" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">All Environments</option>
                        <% [...new Set(credentials.map(c => c.environment))].forEach(env => { %>
                            <option value="<%= env %>"><%= env %></option>
                        <% }) %>
                    </select>
                </div>
            </div>
        </div>

        <!-- Credentials List -->
        <div class="space-y-6">
            <% if (credentials.length === 0) { %>
                <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center">
                    <i class="fas fa-key text-gray-300 text-6xl mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No credentials yet</h3>
                    <p class="text-gray-600 mb-6">Start by adding your first service credential</p>
                    <button onclick="document.getElementById('add-credential-btn').click()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200">
                        <i class="fas fa-plus mr-2"></i>
                        Add First Credential
                    </button>
                </div>
            <% } else { %>
                <% 
                const groupedCredentials = {};
                credentials.forEach(cred => {
                    if (!groupedCredentials[cred.environment]) {
                        groupedCredentials[cred.environment] = [];
                    }
                    groupedCredentials[cred.environment].push(cred);
                });
                %>
                
                <% Object.entries(groupedCredentials).forEach(([env, envCredentials]) => { %>
                    <div class="credential-group" data-environment="<%= env %>">
                        <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                            <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium mr-3">
                                <%= env %>
                            </span>
                            <span class="text-gray-500 text-sm">(<%= envCredentials.length %> credentials)</span>
                        </h2>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <% envCredentials.forEach(cred => { %>
                                <div class="credential-card bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow duration-200">
                                    <div class="flex items-start justify-between mb-4">
                                        <div class="flex-1">
                                            <h3 class="font-semibold text-gray-900 mb-1"><%= cred.serviceName %></h3>
                                            <p class="text-sm text-gray-500">
                                                <i class="fas fa-calendar-alt mr-1"></i>
                                                Added <%= new Date(cred.createdAt).toLocaleDateString() %>
                                            </p>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <button onclick="editCredential('<%= cred._id %>')" class="text-gray-400 hover:text-blue-600 transition-colors duration-200" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button onclick="deleteCredential('<%= cred._id %>')" class="text-gray-400 hover:text-red-600 transition-colors duration-200" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div class="space-y-3">
                                        <% if (cred.credentials.username) { %>
                                            <div class="flex items-center justify-between">
                                                <span class="text-sm text-gray-600">Username:</span>
                                                <code class="text-sm bg-gray-100 px-2 py-1 rounded"><%= cred.credentials.username %></code>
                                            </div>
                                        <% } %>
                                        
                                        <% if (cred.credentials.email) { %>
                                            <div class="flex items-center justify-between">
                                                <span class="text-sm text-gray-600">Email:</span>
                                                <code class="text-sm bg-gray-100 px-2 py-1 rounded"><%= cred.credentials.email %></code>
                                            </div>
                                        <% } %>
                                        
                                        <% if (cred.credentials.endpoint) { %>
                                            <div class="flex items-center justify-between">
                                                <span class="text-sm text-gray-600">Endpoint:</span>
                                                <code class="text-sm bg-gray-100 px-2 py-1 rounded truncate max-w-32"><%= cred.credentials.endpoint %></code>
                                            </div>
                                        <% } %>
                                        
                                        <% if (cred.credentials.password || cred.credentials.apiKey) { %>
                                            <div class="flex items-center justify-between">
                                                <span class="text-sm text-gray-600">Secret:</span>
                                                <div class="flex items-center space-x-2">
                                                    <code id="secret-<%= cred._id %>" class="text-sm bg-gray-100 px-2 py-1 rounded">••••••••</code>
                                                    <button onclick="revealSecret('<%= cred._id %>')" class="text-gray-400 hover:text-blue-600 transition-colors duration-200" title="Reveal" data-revealed="false">
                                                        <i class="fas fa-eye text-xs"></i>
                                                    </button>
                                                    <button onclick="copySecret('<%= cred._id %>')" class="text-gray-400 hover:text-green-600 transition-colors duration-200" title="Copy">
                                                        <i class="fas fa-copy text-xs"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        <% } %>
                                    </div>
                                    
                                    <div class="mt-4 pt-4 border-t border-gray-200">
                                        <div class="flex items-center justify-between text-xs text-gray-500">
                                            <span>Last updated</span>
                                            <span><%= new Date(cred.updatedAt).toLocaleDateString() %></span>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>

    <!-- Add/Edit Credential Modal -->
    <div id="credential-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <h2 id="modal-title" class="text-xl font-semibold text-gray-900">Add Credential</h2>
                        <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>
                
                <form id="credential-form" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                            <label for="serviceName" class="block text-sm font-medium text-gray-700 mb-2">Service Name *</label>
                            <input type="text" id="serviceName" name="serviceName" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label for="environment" class="block text-sm font-medium text-gray-700 mb-2">Environment *</label>
                            <select id="environment" name="environment" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Select Environment</option>
                                <option value="development">Development</option>
                                <option value="staging">Staging</option>
                                <option value="production">Production</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mb-6">
                        <label for="credentialType" class="block text-sm font-medium text-gray-700 mb-2">Credential Type *</label>
                        <select id="credentialType" name="credentialType" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">Select Type</option>
                            <option value="username-password">Username & Password</option>
                            <option value="api-key">API Key</option>
                            <option value="oauth">OAuth</option>
                        </select>
                    </div>
                    
                    <div id="credential-fields" class="space-y-4 mb-6">
                        <!-- Dynamic fields will be inserted here -->
                    </div>
                    
                    <div class="flex justify-end space-x-4">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors duration-200">Cancel</button>
                        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200">
                            <i class="fas fa-save mr-2"></i>
                            Save Credential
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>
    
    <script src="/js/main.js"></script>
    <script>
        let editingCredentialId = null;

        // Modal functions
        function openModal(title = 'Add Credential') {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('credential-modal').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('credential-modal').classList.add('hidden');
            document.getElementById('credential-form').reset();
            editingCredentialId = null;
        }

        // Add credential button
        document.getElementById('add-credential-btn').addEventListener('click', function() {
            openModal('Add Credential');
        });

        // Credential type change handler
        document.getElementById('credentialType').addEventListener('change', function() {
            const type = this.value;
            const fieldsContainer = document.getElementById('credential-fields');
            
            let fieldsHTML = '';
            
            switch(type) {
                case 'username-password':
                    fieldsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Username/Email</label>
                            <input type="text" name="username" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                            <input type="password" name="password" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Endpoint (Optional)</label>
                            <input type="url" name="endpoint" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    `;
                    break;
                case 'api-key':
                    fieldsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">API Key</label>
                            <textarea name="apiKey" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Endpoint</label>
                            <input type="url" name="endpoint" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    `;
                    break;
                case 'oauth':
                    fieldsHTML = `
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Client ID</label>
                            <input type="text" name="clientId" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Client Secret</label>
                            <input type="password" name="clientSecret" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">OAuth Endpoint</label>
                            <input type="url" name="endpoint" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    `;
                    break;
            }
            
            fieldsContainer.innerHTML = fieldsHTML;
        });

        // Form submission
        document.getElementById('credential-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const data = {
                serviceName: formData.get('serviceName'),
                environment: formData.get('environment'),
                credentialType: formData.get('credentialType'),
                credentials: {}
            };
            
            // Collect credential fields
            const credentialType = formData.get('credentialType');
            switch(credentialType) {
                case 'username-password':
                    data.credentials.username = formData.get('username');
                    data.credentials.password = formData.get('password');
                    data.credentials.endpoint = formData.get('endpoint');
                    break;
                case 'api-key':
                    data.credentials.apiKey = formData.get('apiKey');
                    data.credentials.endpoint = formData.get('endpoint');
                    break;
                case 'oauth':
                    data.credentials.clientId = formData.get('clientId');
                    data.credentials.clientSecret = formData.get('clientSecret');
                    data.credentials.endpoint = formData.get('endpoint');
                    break;
            }
            
            try {
                const apiKey = new URLSearchParams(window.location.search).get('apiKey');
                const method = editingCredentialId ? 'PUT' : 'POST';
                const url = editingCredentialId ? `/api/credentials/${editingCredentialId}` : '/api/credentials';
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-Key': apiKey
                    },
                    body: JSON.stringify(data)
                });
                
                if (!response.ok) {
                    throw new Error('Failed to save credential');
                }
                
                showNotification('Credential saved successfully!', 'success');
                closeModal();
                setTimeout(() => window.location.reload(), 1000);
                
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
            }
        });

        // Search and filter
        document.getElementById('search-input').addEventListener('input', function() {
            const query = this.value.toLowerCase();
            filterCredentials();
        });

        document.getElementById('env-filter').addEventListener('change', function() {
            filterCredentials();
        });

        function filterCredentials() {
            const searchQuery = document.getElementById('search-input').value.toLowerCase();
            const envFilter = document.getElementById('env-filter').value;
            
            document.querySelectorAll('.credential-group').forEach(group => {
                const environment = group.dataset.environment;
                let hasVisibleCards = false;
                
                if (!envFilter || environment === envFilter) {
                    group.querySelectorAll('.credential-card').forEach(card => {
                        const serviceName = card.querySelector('h3').textContent.toLowerCase();
                        
                        if (!searchQuery || serviceName.includes(searchQuery)) {
                            card.style.display = 'block';
                            hasVisibleCards = true;
                        } else {
                            card.style.display = 'none';
                        }
                    });
                    
                    group.style.display = hasVisibleCards ? 'block' : 'none';
                } else {
                    group.style.display = 'none';
                }
            });
        }

        // Credential actions
        async function editCredential(id) {
            try {
                const apiKey = new URLSearchParams(window.location.search).get('apiKey');
                const response = await fetch(`/api/credentials/${id}`, {
                    headers: { 'X-API-Key': apiKey }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch credential');
                }
                
                const credential = await response.json();
                
                // Populate form with existing data
                document.getElementById('serviceName').value = credential.serviceName;
                document.getElementById('environment').value = credential.environment;
                document.getElementById('credentialType').value = credential.credentialType;
                
                // Trigger credential type change to show appropriate fields
                document.getElementById('credentialType').dispatchEvent(new Event('change'));
                
                // Wait for fields to be created, then populate them
                setTimeout(() => {
                    const creds = credential.credentials;
                    if (creds.username) document.querySelector('input[name="username"]').value = creds.username;
                    if (creds.password) document.querySelector('input[name="password"]').value = creds.password;
                    if (creds.apiKey) document.querySelector('textarea[name="apiKey"]').value = creds.apiKey;
                    if (creds.endpoint) document.querySelector('input[name="endpoint"]').value = creds.endpoint;
                    if (creds.clientId) document.querySelector('input[name="clientId"]').value = creds.clientId;
                    if (creds.clientSecret) document.querySelector('input[name="clientSecret"]').value = creds.clientSecret;
                }, 100);
                
                editingCredentialId = id;
                openModal('Edit Credential');
                
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
            }
        }

        async function deleteCredential(id) {
            if (!confirm('Are you sure you want to delete this credential? This action cannot be undone.')) {
                return;
            }
            
            try {
                const apiKey = new URLSearchParams(window.location.search).get('apiKey');
                const response = await fetch(`/api/credentials/${id}`, {
                    method: 'DELETE',
                    headers: { 'X-API-Key': apiKey }
                });
                
                if (!response.ok) {
                    throw new Error('Failed to delete credential');
                }
                
                showNotification('Credential deleted successfully!', 'success');
                setTimeout(() => window.location.reload(), 1000);
                
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
            }
        }

        function revealSecret(id) {
            const button = event.target.closest('button');
            const codeElement = document.getElementById(`secret-${id}`);
            
            if (button.dataset.revealed === 'true') {
                // Hide secret
                codeElement.textContent = '••••••••';
                button.innerHTML = '<i class="fas fa-eye text-xs"></i>';
                button.title = 'Reveal';
                button.dataset.revealed = 'false';
            } else {
                // Show secret
                const apiKey = new URLSearchParams(window.location.search).get('apiKey');
                
                fetch(`/api/credentials/${id}`, {
                    headers: { 'X-API-Key': apiKey }
                })
                .then(response => response.json())
                .then(credential => {
                    const secret = credential.credentials.password || credential.credentials.apiKey || credential.credentials.clientSecret;
                    if (secret) {
                        codeElement.textContent = secret;
                        button.innerHTML = '<i class="fas fa-eye-slash text-xs"></i>';
                        button.title = 'Hide';
                        button.dataset.revealed = 'true';
                        
                        // Auto-hide after 10 seconds
                        setTimeout(() => {
                            if (button.dataset.revealed === 'true') {
                                codeElement.textContent = '••••••••';
                                button.innerHTML = '<i class="fas fa-eye text-xs"></i>';
                                button.title = 'Reveal';
                                button.dataset.revealed = 'false';
                            }
                        }, 10000);
                    }
                })
                .catch(error => {
                    showNotification('Failed to reveal secret', 'error');
                });
            }
        }

        function copySecret(id) {
            const apiKey = new URLSearchParams(window.location.search).get('apiKey');
            
            fetch(`/api/credentials/${id}`, {
                headers: { 'X-API-Key': apiKey }
            })
            .then(response => response.json())
            .then(credential => {
                const secret = credential.credentials.password || credential.credentials.apiKey || credential.credentials.clientSecret;
                if (secret) {
                    copyToClipboard(secret, 'Secret copied to clipboard!');
                } else {
                    showNotification('No secret found to copy', 'error');
                }
            })
            .catch(error => {
                showNotification('Failed to copy secret', 'error');
            });
        }
    </script>
</body>
</html>
